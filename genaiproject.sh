# Check the number of command line arguments
if [ "$#" -lt 2 ]; then
    echo "SYNTAX: ./genaiproject.sh <topic> <difficulty> [<no of questions> <file to be inserted in (usually a text file)>], Recommended to use grade levels to describe difficulty (like College, High School etc)"
    exit 1  # Terminate the program with an error code
fi

topic=$1
difficulty=$2
no=$3
return_filename=$4

if [ -z "$3" ]; then
  no=1
fi
if [ -z "$4" ]; then  
    return_filename="$topic-questions.txt"
fi

# echo $return_filename
# echo $no

filename="buffer.txt"
touch "$filename"
user_prompt="Give me ${no} questions on the topic ${topic} of ${difficulty} 
difficulty which can be answered in a single sentence or word in the following format:\
Question:  \Answer: \ Do not put asteriks around the words Question and Answer. The question and answer must be in 2 separate lines"
  
# echo "$user_prompt"
request="{\"contents\":[{\"parts\":[{\"text\":\"$user_prompt\"}]}]}"
# echo $request

function generate_questions(){
  curl \
  -o $filename \
  -H 'Content-Type: application/json' \
  -d "$request" \
  -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$API_KEY
}
generate_questions
# cat "$filename"
jq '.candidates[].content.parts[].text' "$filename" | tr -d "\"" > "$return_filename"  
rm "$filename"
echo "$(cat "$return_filename")" > "$return_filename"

index=1
while IFS= read -r line || [[ -n "$line" ]]; do
  if [[ $line =~ ^Question: ]]; then
    echo "$index. $line"
    index=$((index + 1))
  elif [[ $line =~ ^Answer: ]]; then
    echo "   $line"
  else
    echo "$line"
  fi
done < "$return_filename" > "output.txt" 
mv "output.txt" "$return_filename"

echo "\n\nWARNING: All questions present are generated by Bard's Gemini Pro text model. 
Any inaccuracies are not a fault of this program, so double-check all answers" >> "$return_filename"

echo "$return_filename   created."
echo "Do you want to convert given file to .docx format (y/n): "
read choice
if [[ $choice == 'y' ]]; then
  pandoc -o "${return_filename%%.*}.docx" "$return_filename"
  echo "${return_filename%%.*}.docx created."
  rm "$return_filename"
fi